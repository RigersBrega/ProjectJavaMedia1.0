/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.school.media;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.PrintWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Haveri
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        VideoInputPanel = new javax.swing.JPanel();
        VideoInputlabel = new javax.swing.JLabel();
        VideoFileNameValue = new javax.swing.JTextField();
        VideoFileNameText = new javax.swing.JLabel();
        VideoFileTypeValue = new javax.swing.JTextField();
        VideoFileTypeText = new javax.swing.JLabel();
        VideoSizeValue = new javax.swing.JTextField();
        VideoSizeText = new javax.swing.JLabel();
        VideoAuthorValue = new javax.swing.JTextField();
        VideoAuthorText = new javax.swing.JLabel();
        VideoTitleValue = new javax.swing.JTextField();
        VideoTitleText = new javax.swing.JLabel();
        VideoLengthValue = new javax.swing.JTextField();
        VideoLengthText = new javax.swing.JLabel();
        VideoQualityValue = new javax.swing.JTextField();
        VideoQualityText = new javax.swing.JLabel();
        VideoGenreValue = new javax.swing.JTextField();
        VideoGenreText = new javax.swing.JLabel();
        MusicInputPanel = new javax.swing.JPanel();
        MusicInputlabel = new javax.swing.JLabel();
        MusicFileNameValue = new javax.swing.JTextField();
        MusicFileNameText = new javax.swing.JLabel();
        MusicFileTypeValue = new javax.swing.JTextField();
        MusicFileTypeText = new javax.swing.JLabel();
        MusicSizeValue = new javax.swing.JTextField();
        MusicSizeText = new javax.swing.JLabel();
        MusicAuthorValue = new javax.swing.JTextField();
        MusicAuthorText = new javax.swing.JLabel();
        MusicTitleValue = new javax.swing.JTextField();
        MusicTitleText = new javax.swing.JLabel();
        MusicLengthValue = new javax.swing.JTextField();
        MusicLengthText = new javax.swing.JLabel();
        MusicBitrateValue = new javax.swing.JTextField();
        MusicBItrateText = new javax.swing.JLabel();
        MusicFeaturedValue = new javax.swing.JTextField();
        MusicFeaturedText = new javax.swing.JLabel();
        MusicGenreValue = new javax.swing.JTextField();
        MusicGenreText = new javax.swing.JLabel();
        EbookInputPanel = new javax.swing.JPanel();
        EbookInputlabel = new javax.swing.JLabel();
        EbookFileNameValue = new javax.swing.JTextField();
        EbookFileNameText = new javax.swing.JLabel();
        EbookFileTypeValue = new javax.swing.JTextField();
        EbookFileTypeText = new javax.swing.JLabel();
        EbookSizeValue = new javax.swing.JTextField();
        EbookSizeText = new javax.swing.JLabel();
        EbookAuthorValue = new javax.swing.JTextField();
        EbookAuthorText = new javax.swing.JLabel();
        EbookTitleValue = new javax.swing.JTextField();
        EbookTitleText = new javax.swing.JLabel();
        EbookPagesValue = new javax.swing.JTextField();
        EbookPagesText = new javax.swing.JLabel();
        EbookGenreValue = new javax.swing.JTextField();
        EbookGenreText = new javax.swing.JLabel();
        InputPanel = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        MediaTypeCB = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        ObjectCount = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ObjectTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setText("List of Media");

        VideoInputlabel.setText("Video Input Area");

        VideoFileNameText.setText("File Name");

        VideoFileTypeText.setText("File Type");

        VideoSizeText.setText("Size (Int)");

        VideoAuthorText.setText("Author");

        VideoTitleText.setText("Title");

        VideoLengthText.setText("Length");

        VideoQualityText.setText("Quality (Int)");

        VideoGenreText.setText("Genre");

        javax.swing.GroupLayout VideoInputPanelLayout = new javax.swing.GroupLayout(VideoInputPanel);
        VideoInputPanel.setLayout(VideoInputPanelLayout);
        VideoInputPanelLayout.setHorizontalGroup(
            VideoInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(VideoInputPanelLayout.createSequentialGroup()
                .addGroup(VideoInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(VideoInputPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(VideoInputlabel))
                    .addGroup(VideoInputPanelLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(VideoInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(VideoFileNameText)
                            .addComponent(VideoFileTypeText)
                            .addComponent(VideoSizeText))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(VideoInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(VideoFileNameValue)
                            .addComponent(VideoFileTypeValue)
                            .addComponent(VideoSizeValue, javax.swing.GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(VideoInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(VideoAuthorText)
                            .addComponent(VideoTitleText)
                            .addComponent(VideoLengthText))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(VideoInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(VideoLengthValue, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
                            .addComponent(VideoAuthorValue)
                            .addComponent(VideoTitleValue))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(VideoInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(VideoQualityText)
                    .addComponent(VideoGenreText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(VideoInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(VideoGenreValue)
                    .addComponent(VideoQualityValue, javax.swing.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE))
                .addContainerGap())
        );
        VideoInputPanelLayout.setVerticalGroup(
            VideoInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(VideoInputPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(VideoInputlabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(VideoInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(VideoFileNameText)
                    .addComponent(VideoFileNameValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(VideoAuthorText)
                    .addComponent(VideoAuthorValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(VideoQualityText)
                    .addComponent(VideoQualityValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(VideoInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(VideoInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(VideoGenreText)
                        .addComponent(VideoGenreValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(VideoInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(VideoFileTypeText)
                        .addComponent(VideoFileTypeValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(VideoTitleText)
                        .addComponent(VideoTitleValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(VideoInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(VideoSizeText)
                    .addComponent(VideoSizeValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(VideoLengthText)
                    .addComponent(VideoLengthValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(44, Short.MAX_VALUE))
        );

        MusicInputlabel.setText("Music Input Area");

        MusicFileNameText.setText("File Name");

        MusicFileTypeText.setText("File Type");

        MusicSizeText.setText("Size (Int)");

        MusicAuthorText.setText("Author");

        MusicTitleText.setText("Title");

        MusicLengthText.setText("Length");

        MusicBItrateText.setText("Bitrate (Int)");

        MusicFeaturedValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MusicFeaturedValueActionPerformed(evt);
            }
        });

        MusicFeaturedText.setText("Featured");

        MusicGenreValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MusicGenreValueActionPerformed(evt);
            }
        });

        MusicGenreText.setText("Genre");

        javax.swing.GroupLayout MusicInputPanelLayout = new javax.swing.GroupLayout(MusicInputPanel);
        MusicInputPanel.setLayout(MusicInputPanelLayout);
        MusicInputPanelLayout.setHorizontalGroup(
            MusicInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MusicInputPanelLayout.createSequentialGroup()
                .addGroup(MusicInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(MusicInputPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(MusicInputlabel))
                    .addGroup(MusicInputPanelLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(MusicInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(MusicFileNameText)
                            .addComponent(MusicFileTypeText)
                            .addComponent(MusicSizeText))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(MusicInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(MusicFileNameValue)
                            .addComponent(MusicFileTypeValue)
                            .addComponent(MusicSizeValue, javax.swing.GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(MusicInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(MusicAuthorText)
                            .addComponent(MusicTitleText)
                            .addComponent(MusicLengthText))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(MusicInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(MusicLengthValue, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
                            .addComponent(MusicAuthorValue)
                            .addComponent(MusicTitleValue))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(MusicInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(MusicFeaturedText)
                    .addComponent(MusicGenreText)
                    .addComponent(MusicBItrateText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(MusicInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(MusicBitrateValue)
                    .addComponent(MusicGenreValue)
                    .addComponent(MusicFeaturedValue, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE))
                .addContainerGap())
        );
        MusicInputPanelLayout.setVerticalGroup(
            MusicInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MusicInputPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(MusicInputlabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(MusicInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(MusicFileNameText)
                    .addComponent(MusicFileNameValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MusicAuthorText)
                    .addComponent(MusicAuthorValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MusicBItrateText)
                    .addComponent(MusicBitrateValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(MusicInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(MusicInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(MusicFeaturedText)
                        .addComponent(MusicFeaturedValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(MusicInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(MusicFileTypeText)
                        .addComponent(MusicFileTypeValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(MusicTitleText)
                        .addComponent(MusicTitleValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(MusicInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(MusicInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(MusicGenreText)
                        .addComponent(MusicGenreValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(MusicInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(MusicSizeText)
                        .addComponent(MusicSizeValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(MusicLengthText)
                        .addComponent(MusicLengthValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(44, Short.MAX_VALUE))
        );

        EbookInputPanel.setPreferredSize(new java.awt.Dimension(678, 147));

        EbookInputlabel.setText("Ebook Input Area");

        EbookFileNameText.setText("File Name");

        EbookFileTypeText.setText("File Type");

        EbookSizeText.setText("Size (Int)");

        EbookAuthorText.setText("Author");

        EbookTitleText.setText("Title");

        EbookPagesText.setText("Pages (Int)");

        EbookGenreText.setText("Genre");

        javax.swing.GroupLayout EbookInputPanelLayout = new javax.swing.GroupLayout(EbookInputPanel);
        EbookInputPanel.setLayout(EbookInputPanelLayout);
        EbookInputPanelLayout.setHorizontalGroup(
            EbookInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EbookInputPanelLayout.createSequentialGroup()
                .addGroup(EbookInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(EbookInputPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(EbookInputlabel))
                    .addGroup(EbookInputPanelLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(EbookInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(EbookFileNameText)
                            .addComponent(EbookFileTypeText)
                            .addComponent(EbookSizeText))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(EbookInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(EbookFileNameValue)
                            .addComponent(EbookFileTypeValue)
                            .addComponent(EbookSizeValue, javax.swing.GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(EbookInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(EbookAuthorText)
                            .addComponent(EbookTitleText)
                            .addComponent(EbookPagesText))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(EbookInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(EbookPagesValue, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
                            .addComponent(EbookAuthorValue)
                            .addComponent(EbookTitleValue))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(EbookGenreText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(EbookGenreValue, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
                .addContainerGap())
        );
        EbookInputPanelLayout.setVerticalGroup(
            EbookInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EbookInputPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(EbookInputlabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(EbookInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(EbookFileNameText)
                    .addComponent(EbookFileNameValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(EbookAuthorText)
                    .addComponent(EbookAuthorValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(EbookGenreText)
                    .addComponent(EbookGenreValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(EbookInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(EbookFileTypeText)
                    .addComponent(EbookFileTypeValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(EbookTitleText)
                    .addComponent(EbookTitleValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(EbookInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(EbookSizeText)
                    .addComponent(EbookSizeValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(EbookPagesText)
                    .addComponent(EbookPagesValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(35, Short.MAX_VALUE))
        );

        jLayeredPane1.setLayer(VideoInputPanel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(MusicInputPanel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(EbookInputPanel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(EbookInputPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 1175, Short.MAX_VALUE))
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(MusicInputPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(VideoInputPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 156, Short.MAX_VALUE)
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(EbookInputPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE))
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(MusicInputPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(VideoInputPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton1.setText("Insert Media");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        MediaTypeCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ebook", "Music", "Video" }));
        MediaTypeCB.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                MediaTypeCBItemStateChanged(evt);
            }
        });

        jLabel2.setText("Nr of objects");

        ObjectCount.setText("0");

        javax.swing.GroupLayout InputPanelLayout = new javax.swing.GroupLayout(InputPanel);
        InputPanel.setLayout(InputPanelLayout);
        InputPanelLayout.setHorizontalGroup(
            InputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InputPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(MediaTypeCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addGap(24, 24, 24))
            .addGroup(InputPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(ObjectCount, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        InputPanelLayout.setVerticalGroup(
            InputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InputPanelLayout.createSequentialGroup()
                .addGroup(InputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(ObjectCount, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(1, 1, 1)
                .addGroup(InputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(MediaTypeCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        ObjectTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ObjectType", "File Name", "File Type", "Size", "Author", "Title", "Length", "Pages", "Genre", "Artists", "VideoQ", "Bitrate"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(ObjectTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1175, Short.MAX_VALUE)
                    .addComponent(jLayeredPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(InputPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(InputPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Object selectedItem = MediaTypeCB.getSelectedItem();
        
        if(selectedItem != null){
            String selectedItemStr = selectedItem.toString();

            switch(selectedItemStr){
                case("Ebook"):

                    String fname = EbookFileNameValue.getText();
                    String ftype = EbookFileTypeValue.getText();
                    String sizestr = EbookSizeValue.getText();
                    String author = EbookAuthorValue.getText();
                    String title = EbookTitleValue.getText();
                    String pagesstr = EbookPagesValue.getText();
                    String genre = EbookGenreValue.getText();
                    
                    try{
                        int size = Integer.valueOf(sizestr);
                        int pages = Integer.valueOf(pagesstr);
                       
                        int objCounter = Integer.valueOf(ObjectCount.getText()); // counts the amount of objects in the table
                        
                        
                        MList.add(new Ebook(fname, ftype, size, author, title, pages, genre)); // object created
                        
                        Object[] row = {"Ebook" ,MList.get(objCounter).getfileName(), MList.get(objCounter).getitemType(), MList.get(objCounter).getsizeInMb(), MList.get(objCounter).getauthor(), MList.get(objCounter).getTitle(), MList.get(objCounter).getLength(), MList.get(objCounter).getNumberOfPages(), MList.get(objCounter).getGenre(), MList.get(objCounter).getFeaturedArtists(), MList.get(objCounter).getVideoQuality(), MList.get(objCounter).getBitrate()};
                        
                        DefaultTableModel model = (DefaultTableModel) ObjectTable.getModel();
                        
                        model.addRow(row);  // add a row of data in table
                        
                        String str = "Ebook;;"+ MList.get(objCounter).getfileName()+";;"+MList.get(objCounter).getitemType()+";;"+MList.get(objCounter).getsizeInMb()+";;"+MList.get(objCounter).getauthor()+";;"+MList.get(objCounter).getTitle()+";;"+MList.get(objCounter).getLength()+";;"+MList.get(objCounter).getNumberOfPages()+";;"+MList.get(objCounter).getGenre()+";;"+MList.get(objCounter).getFeaturedArtists()+";;"+MList.get(objCounter).getVideoQuality()+";;"+MList.get(objCounter).getBitrate();
                        
                        writeInFile(str); // look function below
                        
                        objCounter++;
                        ObjectCount.setText(""+objCounter);
                    }
                    catch(NumberFormatException ex){
                        System.out.println("[-] Parsing error");
                    }
                    
                    break;
                case("Video"):
                    String fname1 = VideoFileNameValue.getText(); // get the input data
                    String ftype1 = VideoFileTypeValue.getText();
                    String sizestr1 = VideoSizeValue.getText();
                    String author1 = VideoAuthorValue.getText();
                    String title1 = VideoTitleValue.getText();
                    String length = VideoLengthValue.getText();
                    String qualitystr = VideoQualityValue.getText();
                    String genre1 = VideoGenreValue.getText();
                    
                    try{
                        int size1 = Integer.parseInt(sizestr1); // convert some to int
                        int quality = Integer.parseInt(qualitystr);
                        
                        int objCounter = Integer.valueOf(ObjectCount.getText());
                        
                        
                        MList.add(new VideoDvd(fname1, ftype1, size1, author1, title1, length, quality, genre1)); // Create Media Obj
                        
                        Object[] row = {"Video" ,MList.get(objCounter).getfileName(), MList.get(objCounter).getitemType(), MList.get(objCounter).getsizeInMb(), MList.get(objCounter).getauthor(), MList.get(objCounter).getTitle(), MList.get(objCounter).getLength(), MList.get(objCounter).getNumberOfPages(), MList.get(objCounter).getGenre(), MList.get(objCounter).getFeaturedArtists(), MList.get(objCounter).getVideoQuality(), MList.get(objCounter).getBitrate()};
                        
                        DefaultTableModel model = (DefaultTableModel) ObjectTable.getModel();
                        
                        model.addRow(row);
                        
                        String str = "Video;;"+ MList.get(objCounter).getfileName()+";;"+MList.get(objCounter).getitemType()+";;"+MList.get(objCounter).getsizeInMb()+";;"+MList.get(objCounter).getauthor()+";;"+MList.get(objCounter).getTitle()+";;"+MList.get(objCounter).getLength()+";;"+MList.get(objCounter).getNumberOfPages()+";;"+MList.get(objCounter).getGenre()+";;"+MList.get(objCounter).getFeaturedArtists()+";;"+MList.get(objCounter).getVideoQuality()+";;"+MList.get(objCounter).getBitrate();
                        
                        writeInFile(str); // look function below
                        
                        objCounter++;
                        ObjectCount.setText(""+objCounter);
                    }
                    catch(NumberFormatException ex){
                        System.out.println("[-] Parsing error");
                    }
                    break;
                case("Music"):
                    String fname2 = MusicFileNameValue.getText();
                    String ftype2 = MusicFileTypeValue.getText();
                    String sizestr2 = MusicSizeValue.getText();
                    String author2 = MusicAuthorValue.getText();
                    String title2 = MusicTitleValue.getText();
                    String length2 = MusicLengthValue.getText();
                    String bitratestr = MusicBitrateValue.getText();
                    String featured = MusicFeaturedValue.getText();
                    String genre2 = MusicGenreValue.getText();
                    
                    try{
                        int size2 = Integer.parseInt(sizestr2);
                        int bitrate = Integer.parseInt(bitratestr);
                        
                        int objCounter = Integer.valueOf(ObjectCount.getText());
                        
                        
                        MList.add(new MusicCd(fname2, ftype2, size2, author2, title2, length2, bitrate, featured, genre2));
                       
                        Object[] row = {"Music" ,MList.get(objCounter).getfileName(), MList.get(objCounter).getitemType(), MList.get(objCounter).getsizeInMb(), MList.get(objCounter).getauthor(), MList.get(objCounter).getTitle(), MList.get(objCounter).getLength(), MList.get(objCounter).getNumberOfPages(), MList.get(objCounter).getGenre(), MList.get(objCounter).getFeaturedArtists(), MList.get(objCounter).getVideoQuality(), MList.get(objCounter).getBitrate()};
                        
                        DefaultTableModel model = (DefaultTableModel) ObjectTable.getModel();
                        
                        model.addRow(row);
                        
                        String str = "Music;;"+ MList.get(objCounter).getfileName()+";;"+MList.get(objCounter).getitemType()+";;"+MList.get(objCounter).getsizeInMb()+";;"+MList.get(objCounter).getauthor()+";;"+MList.get(objCounter).getTitle()+";;"+MList.get(objCounter).getLength()+";;"+MList.get(objCounter).getNumberOfPages()+";;"+MList.get(objCounter).getGenre()+";;"+MList.get(objCounter).getFeaturedArtists()+";;"+MList.get(objCounter).getVideoQuality()+";;"+MList.get(objCounter).getBitrate();
                        
                        writeInFile(str); // look function below
                        
                        objCounter++;
                        ObjectCount.setText(""+objCounter);
                    }
                    catch(NumberFormatException ex){
                        System.out.println("[-] Parsing error");
                    }
                    break;
                default:
                    System.out.println("[-] ComboBox input issue"); 
                    break;
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    void writeInFile(String str){
        
        String[] lineElements = str.split(";;");
        
        // check if the number of elements is correct (if ;; inputed in gui inputlabel then Split(";;") wont work correctly displaying more elements)
        if (lineElements.length == 12 ){ 
            try{
                System.out.println("[+] Trying to write to file");
                FileWriter fw = new FileWriter("Media.txt", true);
                BufferedWriter bw = new BufferedWriter(fw);
                PrintWriter out = new PrintWriter(bw);
                            
                out.println(str);
                out.close();
            }catch(IOException e){
                System.out.println("[-] Error writing file!");
            }
        }
     
    }
    
    
    private void MediaTypeCBItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_MediaTypeCBItemStateChanged
        Object selectedItem = MediaTypeCB.getSelectedItem(); 
        
        // get the mediaType selected in comboBox
        // set visible only the selected panel matching the comboBox
        
        if(selectedItem != null){
            String selectedItemStr = selectedItem.toString();
            switch(selectedItemStr){
                case("Ebook"):
                    EbookInputPanel.setVisible(true);
                    MusicInputPanel.setVisible(false);
                    VideoInputPanel.setVisible(false);
                    break;
                case("Video"):
                    EbookInputPanel.setVisible(false);
                    MusicInputPanel.setVisible(false);
                    VideoInputPanel.setVisible(true);
                    break;
                case("Music"):
                    EbookInputPanel.setVisible(false);
                    MusicInputPanel.setVisible(true);
                    VideoInputPanel.setVisible(false);
                    break;
                default:
                    EbookInputPanel.setVisible(false);
                    MusicInputPanel.setVisible(false);
                    VideoInputPanel.setVisible(false);
                    break;
            }
        }
    }//GEN-LAST:event_MediaTypeCBItemStateChanged

    private void MusicFeaturedValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MusicFeaturedValueActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MusicFeaturedValueActionPerformed

    private void MusicGenreValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MusicGenreValueActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MusicGenreValueActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        
        int objCounter = Integer.valueOf(ObjectCount.getText()); // its supposed to be 0 at start but just to be sure
        
        //When the window is opened find or create the file and read data from it. Insert the data in ObjectTable
      
        try{
            File file = new File("Media.txt");
            
            if(file.createNewFile()){
                System.out.println("[+] File Created");
            }else{
                System.out.println("[+] File already created");
                
                try{
                    String line;    //Holds rows of text
                    
                    BufferedReader br = new BufferedReader(new FileReader(file));
                    
                    // Example of a row of data => Ebook;;Ebook1;;PDF;;34;;Samo;;LearningJava;;-1;;56;;Learning;;-1;;-1;;-1
                    // First data tells the Object Type. Could be useful later
                    
                    while((line = br.readLine()) != null){      //For each line of the text file
                        String lineArr[] = line.split(";;");    // cut the line in data array
                        
                        if(lineArr.length == 12){       //Check data array amount . if different from 12 dont insert the data in table
                           
                            Object[] row = lineArr;
                            
                            if(lineArr[0].equals("Ebook")){
                                MList.add(new Ebook(lineArr[1], lineArr[2], Integer.valueOf(lineArr[3]), lineArr[4], lineArr[5], Integer.valueOf(lineArr[7]), lineArr[8]));
                            }
                            else if(lineArr[0].equals("Music")){
                                MList.add(new MusicCd(lineArr[1], lineArr[2], Integer.valueOf(lineArr[3]), lineArr[4], lineArr[5], lineArr[6], Integer.valueOf(lineArr[11]), lineArr[9], lineArr[8]));
                            }
                            else if(lineArr[0].equals("Video")){
                                MList.add(new VideoDvd(lineArr[1], lineArr[2], Integer.valueOf(lineArr[3]), lineArr[4], lineArr[5], lineArr[6], Integer.valueOf(lineArr[10]), lineArr[8]));
                            }
                            else{
                                continue;
                            }

                            objCounter++;                   // increment for the object count text label
                            
                            DefaultTableModel model = (DefaultTableModel) ObjectTable.getModel();

                            model.addRow(row);
                        }
                    }
                    
                    ObjectCount.setText(""+objCounter); // pdate the textlabel to the amount of objects
                            
                }catch(Exception err){
                    System.out.println("[-] Unable to open file");
                }
                
            }
            
        }
        catch(IOException err){
            System.out.println("[-] File error");
        }
    }//GEN-LAST:event_formWindowOpened


    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });

    }
    
    Mediateke[] MediaList = new Mediateke[100];
    
    ArrayList <Mediateke> MList = new ArrayList<>();
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel EbookAuthorText;
    private javax.swing.JTextField EbookAuthorValue;
    private javax.swing.JLabel EbookFileNameText;
    private javax.swing.JTextField EbookFileNameValue;
    private javax.swing.JLabel EbookFileTypeText;
    private javax.swing.JTextField EbookFileTypeValue;
    private javax.swing.JLabel EbookGenreText;
    private javax.swing.JTextField EbookGenreValue;
    private javax.swing.JPanel EbookInputPanel;
    private javax.swing.JLabel EbookInputlabel;
    private javax.swing.JLabel EbookPagesText;
    private javax.swing.JTextField EbookPagesValue;
    private javax.swing.JLabel EbookSizeText;
    private javax.swing.JTextField EbookSizeValue;
    private javax.swing.JLabel EbookTitleText;
    private javax.swing.JTextField EbookTitleValue;
    private javax.swing.JPanel InputPanel;
    private javax.swing.JComboBox<String> MediaTypeCB;
    private javax.swing.JLabel MusicAuthorText;
    private javax.swing.JTextField MusicAuthorValue;
    private javax.swing.JLabel MusicBItrateText;
    private javax.swing.JTextField MusicBitrateValue;
    private javax.swing.JLabel MusicFeaturedText;
    private javax.swing.JTextField MusicFeaturedValue;
    private javax.swing.JLabel MusicFileNameText;
    private javax.swing.JTextField MusicFileNameValue;
    private javax.swing.JLabel MusicFileTypeText;
    private javax.swing.JTextField MusicFileTypeValue;
    private javax.swing.JLabel MusicGenreText;
    private javax.swing.JTextField MusicGenreValue;
    private javax.swing.JPanel MusicInputPanel;
    private javax.swing.JLabel MusicInputlabel;
    private javax.swing.JLabel MusicLengthText;
    private javax.swing.JTextField MusicLengthValue;
    private javax.swing.JLabel MusicSizeText;
    private javax.swing.JTextField MusicSizeValue;
    private javax.swing.JLabel MusicTitleText;
    private javax.swing.JTextField MusicTitleValue;
    private javax.swing.JLabel ObjectCount;
    private javax.swing.JTable ObjectTable;
    private javax.swing.JLabel VideoAuthorText;
    private javax.swing.JTextField VideoAuthorValue;
    private javax.swing.JLabel VideoFileNameText;
    private javax.swing.JTextField VideoFileNameValue;
    private javax.swing.JLabel VideoFileTypeText;
    private javax.swing.JTextField VideoFileTypeValue;
    private javax.swing.JLabel VideoGenreText;
    private javax.swing.JTextField VideoGenreValue;
    private javax.swing.JPanel VideoInputPanel;
    private javax.swing.JLabel VideoInputlabel;
    private javax.swing.JLabel VideoLengthText;
    private javax.swing.JTextField VideoLengthValue;
    private javax.swing.JLabel VideoQualityText;
    private javax.swing.JTextField VideoQualityValue;
    private javax.swing.JLabel VideoSizeText;
    private javax.swing.JTextField VideoSizeValue;
    private javax.swing.JLabel VideoTitleText;
    private javax.swing.JTextField VideoTitleValue;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
